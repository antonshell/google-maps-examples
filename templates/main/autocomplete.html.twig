{#
 # Based on autocomplete example:
 # https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete
 #}
{% extends 'base.html.twig' %}

{% block content %}
    <div class="starter-template">
        <h1>Autocomplete</h1>
        <p class="lead">Enter address or ZIP code</p>

        <form class="autocomplete-form">
            <input id="address" type="text" size="50">
            <input id="geo" type="submit" value="submit">
        </form>
    </div>

    <div class="row">
        <div id="map"></div>
        <div id="infowindow-content">
            <img src="" width="16" height="16" id="place-icon" />
            <span id="place-name" class="title"></span><br />
            <span id="place-address"></span>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        document.addEventListener('DOMContentLoaded', function(){
            var map = new google.maps.Map(document.getElementById("map"), {
                center: {
                    lat: {{ initLat }},
                    lng: {{ initLng }},
                },
                zoom: {{ initZoom }}
            });

            const input = document.getElementById("address");

            const autocomplete = new google.maps.places.Autocomplete(input); // Bind the map's bounds (viewport) property to the autocomplete object,

            autocomplete.bindTo("bounds", map); // Set the data fields to return when the user selects a place.

            autocomplete.setFields([
                "address_components",
                "geometry",
                "icon",
                "name"
            ]);

            const infowindow = new google.maps.InfoWindow();
            const infowindowContent = document.getElementById("infowindow-content");
            infowindow.setContent(infowindowContent);
            const marker = new google.maps.Marker({
                map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener("place_changed", () => {
                infowindow.close();
                marker.setVisible(false);
                const place = autocomplete.getPlace();

                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert(
                        "No details available for input: '" + place.name + "'"
                    );
                    return;
                } // If the place has a geometry, then present it on a map.

                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17); // Why 17? Because it looks good.
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                let address = "";

                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name) || "",
                        (place.address_components[1] && place.address_components[1].short_name) || "",
                        (place.address_components[2] && place.address_components[2].short_name) || ""
                    ].join(" ");
                }

                infowindowContent.children["place-icon"].src = place.icon;
                infowindowContent.children["place-name"].textContent = place.name;
                infowindowContent.children["place-address"].textContent = address;
                infowindow.open(map, marker);
            });
        });
    </script>
{% endblock %}